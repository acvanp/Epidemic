ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
dev.off()
len.vector = 25
ss = round(runif(len.vector, 1, 200 ))
s = ss
s
ll = list(s)
ntrials = 100
absorbing.states = 3
m = p.absorbing.matrix(len.vector, absorbing.states)
s.compare = s
for(i in 2:ntrials){
s = s %*% m # matrix multiplicatoin is %*%
ll[[i]] = s
if(all(round(s,2) == round(s.compare,2))){s = round(runif(len.vector, 1, 200 ))}
s.compare = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black",pch ="-", cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
