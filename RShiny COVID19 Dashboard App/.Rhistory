deaths.china = aggregate(. ~ deaths.china$Country.Region, deaths.china, FUN = sum)
which(rawdata$X1.22.20)
col(rawdata$Province_State)
ncol(rawdata$Province_State)
which(colnames(rawdata)=="Province_State")
which(colnames(rawdata)=="X1.22.20")
which(colnames(rawdata)=="X1.22.20"):ncol(rawdata)
confirmed.ar.us = aggregate(. ~ rawdata$Province_State, rawdata[which(colnames(rawdata)=="X1.22.20"):ncol(rawdata)], FUN = sum)
US.latlon =  aggregate(. ~ rawdata$Province_State, rawdata[which(colnames(rawdata)=="X1.22.20"):ncol(rawdata)], FUN = median)
deaths.ar.us = aggregate(. ~ rawdeaths$Province_State, rawdeaths[which(colnames(rawdeaths)=="X1.22.20"):ncol(rawdeaths)], FUN = sum)
View(confirmed.ar.us)
View(deaths.ar.us)
local.cases = cbind(rawdata$Combined_Key, rawdata$Lat, rawdata$Long_, rawdeaths$Population,
rawdata[ncol(rawdata)], rawdeaths[ncol(rawdeaths)] )
colnames(local.cases) = c("Combined_Key", "Lat", "Long_", "Population", "Confirmed", "Deaths")
local.cases[which(local.cases$Combined_Key == "Wayne,Michigan,US"),"Long_"] = rawdata[which(rawdata$Combined_Key == "Wayne, Michigan, US"),"Long_"]
#remove lat/lon of zero
local.cases = local.cases[which(local.cases$Long_ != 0),]
confirmed = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
x = confirmed[which(confirmed$Country.Region ==  "China"),]
confirmed.china = aggregate(. ~ confirmed.china$Country.Region, confirmed.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
confirmed.china[,which(colnames(x)=="X1.22.20"):ncol(x)]
confirmed.china[,which(colnames(x)=="X1.22.20"):ncol(x)]
x = confirmed[which(confirmed$Country.Region ==  "China"),]
confirmed.china = x
confirmed.china = aggregate(. ~ confirmed.china$Country.Region, confirmed.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
View(confirmed.china)
# aggregating adds a nuisance column
#confirmed.china = confirmed.china[,2:ncol(confirmed.china)]
#GPS
confirmed.china$Lat = mean(x$Lat)
confirmed.china$Long = mean(x$Long)
confirmed.china$Country.Region = "China"
# global total confirmed cases
confirmed.global = confirmed
confirmed.global = aggregate(. ~ confirmed.global$Province.State, confirmed[,which(colnames(confirmed)=="X1.22.20"):ncol(confirmed)], FUN = sum)
confirmed.global$Country.Region = "Global" # give info for popup label
confirmed.global$Lat = 30
confirmed.global$Long = -30
# match number of columns for US and global data frames
confirmed.ar.us$Country_Region = "US"
deaths.ar.us$Country_Region = "US"
confirmed.ar.us$`rawdata$Province_State`
confirmed.ar.us$Province_State = confirmed.ar.us$`rawdata$Province_State`
deaths.ar.us$Province_State = deaths.ar.us$`rawdeaths$Province_State`
confirmed.ar.us$Lat = US.latlon$Lat
deaths.ar.us$Lat = US.latlon$Lat
View(confirmed.global)
confirmed.global$Province.State = ""
confirmed.ar.us = aggregate(. ~ rawdata$Province_State, rawdata[which(colnames(rawdata)=="X1.22.20"):ncol(rawdata)], FUN = sum)
US.latlon =  aggregate(. ~ rawdata$Province_State, rawdata[which(colnames(rawdata)=="X1.22.20"):ncol(rawdata)], FUN = median)
deaths.ar.us = aggregate(. ~ rawdeaths$Province_State, rawdeaths[which(colnames(rawdeaths)=="X1.22.20"):ncol(rawdeaths)], FUN = sum)
# get rid of nuisance US entry that does not contain data
#confirmed.ar.us = confirmed.ar.us[which(confirmed.ar.us$Province.State != "US"),]
#deaths.ar.us = deaths.ar.us[which(deaths.ar.us$Province.State != "US"),]
local.cases = cbind(rawdata$Combined_Key, rawdata$Lat, rawdata$Long_, rawdeaths$Population,
rawdata[ncol(rawdata)], rawdeaths[ncol(rawdeaths)] )
colnames(local.cases) = c("Combined_Key", "Lat", "Long_", "Population", "Confirmed", "Deaths")
#local.cases[which(local.cases$Country_Region == "US"),]
local.cases[which(local.cases$Combined_Key == "Wayne,Michigan,US"),"Long_"] = rawdata[which(rawdata$Combined_Key == "Wayne, Michigan, US"),"Long_"]
# why are some local data plots not working (Houston, Tx; Wayne Michigan)
#remove lat/lon of zero
local.cases = local.cases[which(local.cases$Long_ != 0),]
# global time series
confirmed = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
#fix US column names
#colnames(confirmed.ar.us) = colnames(confirmed)
#china
x = confirmed[which(confirmed$Country.Region ==  "China"),]
confirmed.china = x
confirmed.china = aggregate(. ~ confirmed.china$Country.Region, confirmed.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
# aggregating adds a nuisance column
#confirmed.china = confirmed.china[,2:ncol(confirmed.china)]
#GPS
confirmed.china$Province.State = ""
confirmed.china$Country.Region = "China"
confirmed.china$Lat = mean(x$Lat)
confirmed.china$Long = mean(x$Long)
# global total confirmed cases
confirmed.global = confirmed
confirmed.global$Province.State = ""
confirmed.global = aggregate(. ~ confirmed.global$Province.State, confirmed[,which(colnames(confirmed)=="X1.22.20"):ncol(confirmed)], FUN = sum)
#confirmed.global = confirmed.global[,2:ncol(confirmed.global)]
#colnames(confirmed.global) = colnames(confirmed)
confirmed.global$Province.State = ""
confirmed.global$Country.Region = "Global" # give info for popup label
confirmed.global$Lat = 30
confirmed.global$Long = -30
confirmed.ar.us$Province_State = confirmed.ar.us$`rawdata$Province_State`
deaths.ar.us$Province_State = deaths.ar.us$`rawdeaths$Province_State`
# match number of columns for US and global data frames
confirmed.ar.us$Country_Region = "US"
deaths.ar.us$Country_Region = "US"
confirmed.ar.us$Lat = US.latlon$Lat
deaths.ar.us$Lat = US.latlon$Lat
confirmed.ar.us$Long_ = US.latlon$Long_
deaths.ar.us$Long_ = US.latlon$Long_
#confirmed.ar.us = confirmed.ar.us[, 8:ncol(confirmed.ar.us)]
#deaths.ar.us   = deaths.ar.us[, 8:ncol(deaths.ar.us)]
confirmed.ar.us = confirmed.ar.us[, which(!colnames(confirmed.ar.us) %in% c("Combined_Key"))]
deaths.ar.us = deaths.ar.us[, which(!colnames(deaths.ar.us) %in% c("Combined_Key", "Population"))]
colnames(confirmed.ar.us)[1:ncol(confirmed.global)] = colnames(confirmed.global)[1:ncol(confirmed.global)]
colnames(deaths.ar.us)[1:ncol(confirmed.global)] = colnames(confirmed.global)[1:ncol(confirmed.global)]
confirmed.ar.us = confirmed.ar.us[which(confirmed.ar.us$Long != 0), ]
deaths.ar.us = deaths.ar.us[which(deaths.ar.us$Long != 0), ]
View(confirmed)
View(confirmed.ar.us)
confirmed.ar.us$Lat = US.latlon$Lat
confirmed.ar.us$Long_ = US.latlon$Long_
confirmed.ar.us = aggregate(. ~ rawdata$Province_State, rawdata[which(colnames(rawdata)=="X1.22.20"):ncol(rawdata)], FUN = sum)
US.latlon =  aggregate(. ~ rawdata$Province_State, rawdata[which(colnames(rawdata)=="X1.22.20"):ncol(rawdata)], FUN = median)
deaths.ar.us = aggregate(. ~ rawdeaths$Province_State, rawdeaths[which(colnames(rawdeaths)=="X1.22.20"):ncol(rawdeaths)], FUN = sum)
# get rid of nuisance US entry that does not contain data
#confirmed.ar.us = confirmed.ar.us[which(confirmed.ar.us$Province.State != "US"),]
#deaths.ar.us = deaths.ar.us[which(deaths.ar.us$Province.State != "US"),]
local.cases = cbind(rawdata$Combined_Key, rawdata$Lat, rawdata$Long_, rawdeaths$Population,
rawdata[ncol(rawdata)], rawdeaths[ncol(rawdeaths)] )
colnames(local.cases) = c("Combined_Key", "Lat", "Long_", "Population", "Confirmed", "Deaths")
#local.cases[which(local.cases$Country_Region == "US"),]
local.cases[which(local.cases$Combined_Key == "Wayne,Michigan,US"),"Long_"] = rawdata[which(rawdata$Combined_Key == "Wayne, Michigan, US"),"Long_"]
# why are some local data plots not working (Houston, Tx; Wayne Michigan)
#remove lat/lon of zero
local.cases = local.cases[which(local.cases$Long_ != 0),]
# global time series
confirmed = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
#fix US column names
#colnames(confirmed.ar.us) = colnames(confirmed)
#china
x = confirmed[which(confirmed$Country.Region ==  "China"),]
confirmed.china = x
confirmed.china = aggregate(. ~ confirmed.china$Country.Region, confirmed.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
# aggregating adds a nuisance column
#confirmed.china = confirmed.china[,2:ncol(confirmed.china)]
#GPS
confirmed.china$Province.State = ""
confirmed.china$Country.Region = "China"
confirmed.china$Lat = mean(x$Lat)
confirmed.china$Long = mean(x$Long)
# global total confirmed cases
confirmed.global = confirmed
confirmed.global$Province.State = ""
confirmed.global = aggregate(. ~ confirmed.global$Province.State, confirmed[,which(colnames(confirmed)=="X1.22.20"):ncol(confirmed)], FUN = sum)
#confirmed.global = confirmed.global[,2:ncol(confirmed.global)]
#colnames(confirmed.global) = colnames(confirmed)
confirmed.global$Province.State = ""
confirmed.global$Country.Region = "Global" # give info for popup label
confirmed.global$Lat = 30
confirmed.global$Long = -30
confirmed.ar.us$Province_State = confirmed.ar.us$`rawdata$Province_State`
deaths.ar.us$Province_State = deaths.ar.us$`rawdeaths$Province_State`
# match number of columns for US and global data frames
confirmed.ar.us$Country_Region = "US"
deaths.ar.us$Country_Region = "US"
confirmed.ar.us$Lat = US.latlon$Lat
deaths.ar.us$Lat = US.latlon$Lat
confirmed.ar.us$Long_ = US.latlon$Long_
deaths.ar.us$Long_ = US.latlon$Long_
confirmed.ar.us$Long_
US.latlon$Long_
View(rawdata)
rawdata[,which(colnames(rawdata) %in% c("Lat", "Long_")]
rawdata[,which(colnames(rawdata) %in% c("Lat", "Long_"))]
US.latlon =  aggregate(. ~ rawdata$Province_State, rawdata[,which(colnames(rawdata) %in% c("Lat", "Long_"))], FUN = median)
confirmed.ar.us = aggregate(. ~ rawdata$Province_State, rawdata[which(colnames(rawdata)=="X1.22.20"):ncol(rawdata)], FUN = sum)
US.latlon =  aggregate(. ~ rawdata$Province_State, rawdata[,which(colnames(rawdata) %in% c("Lat", "Long_"))], FUN = median)
deaths.ar.us = aggregate(. ~ rawdeaths$Province_State, rawdeaths[which(colnames(rawdeaths)=="X1.22.20"):ncol(rawdeaths)], FUN = sum)
# get rid of nuisance US entry that does not contain data
#confirmed.ar.us = confirmed.ar.us[which(confirmed.ar.us$Province.State != "US"),]
#deaths.ar.us = deaths.ar.us[which(deaths.ar.us$Province.State != "US"),]
local.cases = cbind(rawdata$Combined_Key, rawdata$Lat, rawdata$Long_, rawdeaths$Population,
rawdata[ncol(rawdata)], rawdeaths[ncol(rawdeaths)] )
colnames(local.cases) = c("Combined_Key", "Lat", "Long_", "Population", "Confirmed", "Deaths")
#local.cases[which(local.cases$Country_Region == "US"),]
local.cases[which(local.cases$Combined_Key == "Wayne,Michigan,US"),"Long_"] = rawdata[which(rawdata$Combined_Key == "Wayne, Michigan, US"),"Long_"]
# why are some local data plots not working (Houston, Tx; Wayne Michigan)
#remove lat/lon of zero
local.cases = local.cases[which(local.cases$Long_ != 0),]
# global time series
confirmed = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
#fix US column names
#colnames(confirmed.ar.us) = colnames(confirmed)
#china
x = confirmed[which(confirmed$Country.Region ==  "China"),]
confirmed.china = x
confirmed.china = aggregate(. ~ confirmed.china$Country.Region, confirmed.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
# aggregating adds a nuisance column
#confirmed.china = confirmed.china[,2:ncol(confirmed.china)]
#GPS
confirmed.china$Province.State = ""
confirmed.china$Country.Region = "China"
confirmed.china$Lat = mean(x$Lat)
confirmed.china$Long = mean(x$Long)
# global total confirmed cases
confirmed.global = confirmed
confirmed.global$Province.State = ""
confirmed.global = aggregate(. ~ confirmed.global$Province.State, confirmed[,which(colnames(confirmed)=="X1.22.20"):ncol(confirmed)], FUN = sum)
#confirmed.global = confirmed.global[,2:ncol(confirmed.global)]
#colnames(confirmed.global) = colnames(confirmed)
confirmed.global$Province.State = ""
confirmed.global$Country.Region = "Global" # give info for popup label
confirmed.global$Lat = 30
confirmed.global$Long = -30
confirmed.ar.us$Province_State = confirmed.ar.us$`rawdata$Province_State`
deaths.ar.us$Province_State = deaths.ar.us$`rawdeaths$Province_State`
# match number of columns for US and global data frames
confirmed.ar.us$Country_Region = "US"
deaths.ar.us$Country_Region = "US"
confirmed.ar.us$Lat = US.latlon$Lat
deaths.ar.us$Lat = US.latlon$Lat
confirmed.ar.us$Long_ = US.latlon$Long_
deaths.ar.us$Long_ = US.latlon$Long_
#confirmed.ar.us = confirmed.ar.us[, 8:ncol(confirmed.ar.us)]
#deaths.ar.us   = deaths.ar.us[, 8:ncol(deaths.ar.us)]
confirmed.ar.us = confirmed.ar.us[, which(!colnames(confirmed.ar.us) %in% c("Combined_Key"))]
deaths.ar.us = deaths.ar.us[, which(!colnames(deaths.ar.us) %in% c("Combined_Key", "Population"))]
#colnames(confirmed.ar.us)[1:ncol(confirmed.global)] = colnames(confirmed.global)[1:ncol(confirmed.global)]
#colnames(deaths.ar.us)[1:ncol(confirmed.global)] = colnames(confirmed.global)[1:ncol(confirmed.global)]
confirmed.ar.us = confirmed.ar.us[which(confirmed.ar.us$Long != 0), ]
deaths.ar.us = deaths.ar.us[which(deaths.ar.us$Long != 0), ]
View(confirmed.ar.us)
View(confirmed)
# combine global and US state case time series
confirmed = cbind(confirmed[5:ncol(confirmed)], confirmed[1:4])
confirmed = rbind(confirmed, confirmed.ar.us[,2:ncol(confirmed.ar.us)], confirmed.china[,2:ncol(confirmed.china)], confirmed.global[,2:ncol(confirmed.global)])
rownames(confirmed.ar.us)=rownames(confirmed)
rownames(confirmed.china)=rownames(confirmed)
confirmed.ar.us = confirmed.ar.us[,2:ncol(confirmed.ar.us)]
confirmed.china = confirmed.china[,2:ncol(confirmed.china)]
confirmed.gobal = confirmed.global[,2:ncol(confirmed.global)]
# combine global and US state case time series
confirmed = cbind(confirmed[5:ncol(confirmed)], confirmed[1:4])
rownames(confirmed.ar.us)=rownames(confirmed)
confirmed = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
# combine global and US state case time series
confirmed = cbind(confirmed[5:ncol(confirmed)], confirmed[1:4])
rownames(confirmed.ar.us)=rownames(confirmed)
confirmed.gobal = confirmed.global[,2:ncol(confirmed.global)]
confirmed.global = confirmed.global[,2:ncol(confirmed.global)]
colnames(confirmed.ar.us)=colnames(confirmed)
colnames(confirmed.china)=colnames(confirmed)
colnames(confirmed.global)=colnames(confirmed)
confirmed = rbind(confirmed,
confirmed.ar.us[,2:ncol(confirmed.ar.us)],
confirmed.china[,2:ncol(confirmed.china)],
confirmed.global[,2:ncol(confirmed.global)])
confirmed = rbind(confirmed,
confirmed.ar.us,
confirmed.china,
confirmed.global)
runApp()
# fix US column names
#colnames(deaths.ar.us) = colnames(deaths)
x = deaths[which(deaths$Country.Region ==  "China"),]
deaths.china = x
deaths.china = aggregate(. ~ deaths.china$Country.Region, deaths.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
deaths.china$Province.State = ""
deaths.china$Country.Region = "China"
deaths.china$Lat = mean(x$Lat)
deaths.china$Long = mean(x$Long)
# global total deaths cases
deaths.global = deaths
deaths.global$Province.State = ""
deaths.global = aggregate(. ~ deaths.global$Province.State, deaths[,which(colnames(deaths)=="X1.22.20"):ncol(deaths)], FUN = sum)
#deaths.global = deaths.global[,2:ncol(deaths.global)]
#colnames(deaths.global) = colnames(deaths)
deaths.global$Province.State = ""
deaths.global$Country.Region = "Global" # give info for popup label
deaths.global$Lat = 30
deaths.global$Long = -30
deaths.ar.us$Province_State = deaths.ar.us$`rawdata$Province_State`
deaths.ar.us$Province_State = deaths.ar.us$`rawdeaths$Province_State`
# match number of columns for US and global data frames
deaths.ar.us$Country_Region = "US"
deaths.ar.us$Country_Region = "US"
deaths.ar.us$Lat = US.latlon$Lat
deaths.ar.us$Lat = US.latlon$Lat
deaths.ar.us$Long_ = US.latlon$Long_
deaths.ar.us$Long_ = US.latlon$Long_
deaths.ar.us = deaths.ar.us[, which(!colnames(deaths.ar.us) %in% c("Combined_Key"))]
deaths.ar.us = deaths.ar.us[, which(!colnames(deaths.ar.us) %in% c("Combined_Key", "Population"))]
deaths.ar.us = deaths.ar.us[which(deaths.ar.us$Long != 0), ]
deaths.ar.us = deaths.ar.us[which(deaths.ar.us$Long != 0), ]
deaths.ar.us = deaths.ar.us[,2:ncol(deaths.ar.us)]
deaths.china = deaths.china[,2:ncol(deaths.china)]
deaths.global = deaths.global[,2:ncol(deaths.global)]
# combine global and US state case time series
deaths = cbind(deaths[5:ncol(deaths)], deaths[1:4])
colnames(deaths.ar.us)=colnames(deaths)
colnames(deaths.china)=colnames(deaths)
colnames(deaths.global)=colnames(deaths)
deaths = rbind(deaths,
deaths.ar.us,
deaths.china,
deaths.global)
View(deaths.ar.us)
deaths.ar.us = aggregate(. ~ rawdeaths$Province_State, rawdeaths[which(colnames(rawdeaths)=="X1.22.20"):ncol(rawdeaths)], FUN = sum)
# fix US column names
#colnames(deaths.ar.us) = colnames(deaths)
x = deaths[which(deaths$Country.Region ==  "China"),]
deaths.china = x
deaths.china = aggregate(. ~ deaths.china$Country.Region, deaths.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
deaths.china$Province.State = ""
# fix US column names
#colnames(deaths.ar.us) = colnames(deaths)
x = deaths[which(deaths$Country.Region ==  "China"),]
deaths.china = x
deaths.china = aggregate(. ~ deaths.china$Country.Region, deaths.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
# fix US column names
#colnames(deaths.ar.us) = colnames(deaths)
x = deaths[which(deaths$Country.Region ==  "China"),]
deaths.china = x
deaths.china = aggregate(. ~ deaths.china$Country.Region, deaths.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
ncol(x)
deaths.china[,which(colnames(x)=="X1.22.20"):ncol(x)]
# again for deaths
deaths = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
# fix US column names
#colnames(deaths.ar.us) = colnames(deaths)
x = deaths[which(deaths$Country.Region ==  "China"),]
deaths.china = x
deaths.china = aggregate(. ~ deaths.china$Country.Region, deaths.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
deaths.china$Province.State = ""
deaths.china$Country.Region = "China"
deaths.china$Lat = mean(x$Lat)
deaths.china$Long = mean(x$Long)
# global total deaths cases
deaths.global = deaths
deaths.global$Province.State = ""
deaths.global = aggregate(. ~ deaths.global$Province.State, deaths[,which(colnames(deaths)=="X1.22.20"):ncol(deaths)], FUN = sum)
#deaths.global = deaths.global[,2:ncol(deaths.global)]
#colnames(deaths.global) = colnames(deaths)
deaths.global$Province.State = ""
deaths.global$Country.Region = "Global" # give info for popup label
deaths.global$Lat = 30
deaths.global$Long = -30
deaths.ar.us$Province_State = deaths.ar.us$`rawdeaths$Province_State`
# match number of columns for US and global data frames
deaths.ar.us$Country_Region = "US"
deaths.ar.us$Lat = US.latlon$Lat
deaths.ar.us$Long_ = US.latlon$Long_
deaths.ar.us = deaths.ar.us[, which(!colnames(deaths.ar.us) %in% c("Combined_Key", "Population"))]
deaths.ar.us = deaths.ar.us[which(deaths.ar.us$Long != 0), ]
deaths.ar.us = deaths.ar.us[,2:ncol(deaths.ar.us)]
deaths.china = deaths.china[,2:ncol(deaths.china)]
deaths.global = deaths.global[,2:ncol(deaths.global)]
View(deaths)
# combine global and US state case time series
deaths = cbind(deaths[5:ncol(deaths)], deaths[1:4])
colnames(deaths.ar.us)=colnames(deaths)
colnames(deaths.china)=colnames(deaths)
colnames(deaths.global)=colnames(deaths)
deaths = rbind(deaths,
deaths.ar.us,
deaths.china,
deaths.global)
runApp()
runApp()
##############
#State / country map
###########################
# labels for stat/country map
labs = paste(confirmed$Province.State, confirmed$Country.Region, ": \n", as.character(confirmed[,ncol(confirmed)]),
" confirmed,",  "\n", as.character(deaths[,ncol(deaths)]), " deaths,",  "\n")
active = data.frame(cbind(deaths[,ncol(deaths)], confirmed[,ncol(confirmed)]))
active$cols = c()
active$cols[which(active[,2] > 0)] = "darkorange"
View(active)
active = data.frame(cbind(deaths[,ncol(deaths)], confirmed[,ncol(confirmed)]))
active = data.frame(cbind(deaths[,(ncol(deaths)-5)], confirmed[,(ncol(confirmed)-5)]))
active$cols = c()
active$cols[which(active[,2] > 0)] = "darkorange"
active$cols[which(active[,1] > 0)] = "darkred"
active$cols[which(active$cols == "")] = ""
runApp()
(ncol(deaths)-5)
(ncol(deaths)-5)
deaths[,(ncol(deaths)-5)]
active = data.frame(cbind(deaths[,(ncol(deaths)-4)], confirmed[,(ncol(confirmed)-4)]))
active$cols = c()
active$cols[which(active[,2] > 0)] = "darkorange"
active$cols[which(active[,1] > 0)] = "darkred"
runApp()
View(confirmed)
runApp()
deaths[,ncol(deaths)-3]
deaths[,ncol(deaths)-2]
deaths[,ncol(deaths)-1]
deaths = cbind(deaths[, (ncol(deaths)-3):ncol(deaths)], deaths[, 1:(ncol(deaths)-4)])
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(rawdata)
# all time series and local data
rawdata = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
rawdata = rawdata[which(rawdata$Country_Region == "US"),]
rawdeaths = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv")
rawdeaths = rawdeaths[which(rawdeaths$Country_Region == "US"), abs(ncol(rawdata)-ncol(rawdeaths)):ncol(rawdeaths)]
confirmed.ar.us = aggregate(. ~ rawdata$Province_State, rawdata[which(colnames(rawdata)=="X1.22.20"):ncol(rawdata)], FUN = sum)
US.latlon =  aggregate(. ~ rawdata$Province_State, rawdata[,which(colnames(rawdata) %in% c("Lat", "Long_"))], FUN = median)
deaths.ar.us = aggregate(. ~ rawdeaths$Province_State, rawdeaths[which(colnames(rawdeaths)=="X1.22.20"):ncol(rawdeaths)], FUN = sum)
local.cases = cbind(rawdata$Combined_Key, rawdata$Lat, rawdata$Long_, rawdeaths$Population,
rawdata[ncol(rawdata)], rawdeaths[ncol(rawdeaths)] )
colnames(local.cases) = c("Combined_Key", "Lat", "Long_", "Population", "Confirmed", "Deaths")
local.cases[which(local.cases$Combined_Key == "Wayne,Michigan,US"),"Long_"] = rawdata[which(rawdata$Combined_Key == "Wayne, Michigan, US"),"Long_"]
#remove lat/lon of zero
local.cases = local.cases[which(local.cases$Long_ != 0),]
confirmed = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
x = confirmed[which(confirmed$Country.Region ==  "China"),]
confirmed.china = x
confirmed.china = aggregate(. ~ confirmed.china$Country.Region, confirmed.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
confirmed.china$Province.State = ""
confirmed.china$Country.Region = "China"
confirmed.china$Lat = mean(x$Lat)
confirmed.china$Long = mean(x$Long)
# global total confirmed cases
confirmed.global = confirmed
confirmed.global$Province.State = ""
confirmed.global = aggregate(. ~ confirmed.global$Province.State, confirmed[,which(colnames(confirmed)=="X1.22.20"):ncol(confirmed)], FUN = sum)
#confirmed.global = confirmed.global[,2:ncol(confirmed.global)]
#colnames(confirmed.global) = colnames(confirmed)
confirmed.global$Province.State = ""
confirmed.global$Country.Region = "Global" # give info for popup label
confirmed.global$Lat = 30
confirmed.global$Long = -30
confirmed.ar.us$Province_State = confirmed.ar.us$`rawdata$Province_State`
# match number of columns for US and global data frames
confirmed.ar.us$Country_Region = "US"
confirmed.ar.us$Lat = US.latlon$Lat
confirmed.ar.us$Long_ = US.latlon$Long_
confirmed.ar.us = confirmed.ar.us[, which(!colnames(confirmed.ar.us) %in% c("Combined_Key"))]
confirmed.ar.us = confirmed.ar.us[which(confirmed.ar.us$Long != 0), ]
confirmed.ar.us = confirmed.ar.us[,2:ncol(confirmed.ar.us)]
confirmed.china = confirmed.china[,2:ncol(confirmed.china)]
confirmed.global = confirmed.global[,2:ncol(confirmed.global)]
# combine global and US state case time series
confirmed = cbind(confirmed[5:ncol(confirmed)], confirmed[1:4])
colnames(confirmed.ar.us)=colnames(confirmed)
colnames(confirmed.china)=colnames(confirmed)
colnames(confirmed.global)=colnames(confirmed)
confirmed = rbind(confirmed,
confirmed.ar.us,
confirmed.china,
confirmed.global)
confirmed = cbind(confirmed[, (ncol(confirmed)-3):ncol(confirmed)], confirmed[, 1:(ncol(confirmed)-4)])
confirmed.ar.us = cbind(confirmed.ar.us[, (ncol(confirmed.ar.us)-3):ncol(confirmed.ar.us)], confirmed.ar.us[, 1:(ncol(confirmed.ar.us)-4)])
# again for deaths
deaths = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
# fix US column names
#colnames(deaths.ar.us) = colnames(deaths)
x = deaths[which(deaths$Country.Region ==  "China"),]
deaths.china = x
deaths.china = aggregate(. ~ deaths.china$Country.Region, deaths.china[,which(colnames(x)=="X1.22.20"):ncol(x)], FUN = sum)
deaths.china$Province.State = ""
deaths.china$Country.Region = "China"
deaths.china$Lat = mean(x$Lat)
deaths.china$Long = mean(x$Long)
# global total deaths cases
deaths.global = deaths
deaths.global$Province.State = ""
deaths.global = aggregate(. ~ deaths.global$Province.State, deaths[,which(colnames(deaths)=="X1.22.20"):ncol(deaths)], FUN = sum)
#deaths.global = deaths.global[,2:ncol(deaths.global)]
#colnames(deaths.global) = colnames(deaths)
deaths.global$Province.State = ""
deaths.global$Country.Region = "Global" # give info for popup label
deaths.global$Lat = 30
deaths.global$Long = -30
deaths.ar.us$Province_State = deaths.ar.us$`rawdeaths$Province_State`
# match number of columns for US and global data frames
deaths.ar.us$Country_Region = "US"
deaths.ar.us$Lat = US.latlon$Lat
deaths.ar.us$Long_ = US.latlon$Long_
deaths.ar.us = deaths.ar.us[, which(!colnames(deaths.ar.us) %in% c("Combined_Key", "Population"))]
deaths.ar.us = deaths.ar.us[which(deaths.ar.us$Long != 0), ]
deaths.ar.us = deaths.ar.us[,2:ncol(deaths.ar.us)]
deaths.china = deaths.china[,2:ncol(deaths.china)]
deaths.global = deaths.global[,2:ncol(deaths.global)]
# combine global and US state case time series
deaths = cbind(deaths[5:ncol(deaths)], deaths[1:4])
colnames(deaths.ar.us)=colnames(deaths)
colnames(deaths.china)=colnames(deaths)
colnames(deaths.global)=colnames(deaths)
deaths = rbind(deaths,
deaths.ar.us,
deaths.china,
deaths.global)
deaths = cbind(deaths[, (ncol(deaths)-3):ncol(deaths)], deaths[, 1:(ncol(deaths)-4)])
deaths.ar.us = cbind(deaths.ar.us[, (ncol(deaths.ar.us)-3):ncol(deaths.ar.us)], deaths.ar.us[, 1:(ncol(deaths.ar.us)-4)])
View(rawdeaths)
runApp()
local.cases[which(local.cases$Lat == 37.85447),]
local.cases[which(local.cases$Lat == 37.854),]
local.cases[which(local.cases$Lat == 37.85),]
local.cases[which(local.cases$Long_ == -111.4419),]
local.cases[which(local.cases$Long_ %in% -111.4419),]
local.cases[]
local.cases[which(round(local.cases$Long_,2) == -111.44),]
runApp()
runApp()
local.cases[which(local.cases$Combined_Key == "Southwest Utah, Utah, US")]
local.cases[which(local.cases$Combined_Key == "Southwest Utah, Utah, US"),]
runApp()
rawdata$Lat
rawdata$Lat[which(rawdata$Combined_Key == "Southwest Utah, Utah, US"),]
rawdata$Lat[which(rawdata$Combined_Key == "Southwest Utah, Utah, US")]
runApp()
runApp()
runApp()
runApp()
runApp()
